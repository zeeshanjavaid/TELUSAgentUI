/**
 *This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.
 */
package com.fico.dmp.collectionactivitylogservice.controller;

import com.fico.dmp.collectionactivitylogservice.CollectionActivityLogService;
import telus.cdo.cnc.collmgmt.collactivitylogmgmt.model.CollectionActivityLog;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import com.fico.telus.model.CollectionActivityLogRes;
import java.util.List;
import com.fico.telus.model.OrderMgmtHistoryResponse;
import javax.servlet.http.HttpServletRequest;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/collectionActivityLog")
public class CollectionActivityLogController {

    @Autowired
    private CollectionActivityLogService collectionActivityLogService;

    @RequestMapping(value = "/collectionActivityLog", method = RequestMethod.POST)
    public CollectionActivityLog addCollectionActivityLog(@RequestBody CollectionActivityLog collectionActivityLog) throws Exception {
        return collectionActivityLogService.addCollectionActivityLog(collectionActivityLog);
    }

    @RequestMapping(value = "/collectionActivityLog", method = RequestMethod.GET)
    public List<CollectionActivityLogRes> getCollectionActivityLog(@RequestParam(value = "collectionEntityId", required = false) Integer collectionEntityId, @RequestParam(value = "businessEntityEventType", required = false) String businessEntityEventType, @RequestParam(value = "relatedBusinessEntitySubType", required = false) String relatedBusinessEntitySubType, @RequestParam(value = "relatedBusinessEntityContentId", required = false) String relatedBusinessEntityContentId, @RequestParam(value = "relatedBusinessEntityId", required = false) String relatedBusinessEntityId, @RequestParam(value = "relatedBusinessEntityType", required = false) String relatedBusinessEntityType, @RequestParam(value = "relatedBusinessEntityStatus", required = false) String relatedBusinessEntityStatus, @RequestParam(value = "relatedBusinessEntityCreatedDate", required = false) String relatedBusinessEntityCreatedDate, @RequestParam(value = "relatedBusinessEntityCreatedBy", required = false) String relatedBusinessEntityCreatedBy, @RequestParam(value = "relatedBusinessEntityAssignedTo", required = false) String relatedBusinessEntityAssignedTo, @RequestParam(value = "relatedBusinessEntityAssignedTeam", required = false) String relatedBusinessEntityAssignedTeam, @RequestParam(value = "groupBy", required = false) String groupBy, @RequestParam(value = "aggFunc", required = false) String aggFunc, @RequestParam(value = "aggProp", required = false) String aggProp, @RequestParam(value = "fields", required = false) String fields, @RequestParam(value = "offset", required = false) Integer offset, @RequestParam(value = "limit", required = false) Integer limit) throws Exception {
        return collectionActivityLogService.getCollectionActivityLog(collectionEntityId, businessEntityEventType, relatedBusinessEntitySubType, relatedBusinessEntityContentId, relatedBusinessEntityId, relatedBusinessEntityType, relatedBusinessEntityStatus, relatedBusinessEntityCreatedDate, relatedBusinessEntityCreatedBy, relatedBusinessEntityAssignedTo, relatedBusinessEntityAssignedTeam, groupBy, aggFunc, aggProp, fields, offset, limit);
    }

    @RequestMapping(value = "/collectionActivityLogById", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public CollectionActivityLog getCollectionActivityLogById(@RequestParam(value = "id", required = false) String id, @RequestParam(value = "partitionKey", required = false) String partitionKey) throws Exception {
        return collectionActivityLogService.getCollectionActivityLogById(id, partitionKey);
    }

    @RequestMapping(value = "/collectionHistoryView", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<OrderMgmtHistoryResponse> getCollectionHistoryView(@RequestParam(value = "collectionEntityId", required = false) Integer collectionEntityId, @RequestParam(value = "collectionActivityType", required = false) String collectionActivityType, @RequestParam(value = "relatedBusinessEntityId", required = false) String relatedBusinessEntityId, @RequestParam(value = "relatedBusinessEntityType", required = false) String relatedBusinessEntityType, @RequestParam(value = "relatedBusinessEntityStatus", required = false) String relatedBusinessEntityStatus, @RequestParam(value = "relatedBusinessEntityCreatedDate", required = false) String relatedBusinessEntityCreatedDate, @RequestParam(value = "relatedBusinessEntityCreatedBy", required = false) String relatedBusinessEntityCreatedBy, @RequestParam(value = "relatedBusinessEntityAssignedTo", required = false) String relatedBusinessEntityAssignedTo, @RequestParam(value = "relatedBusinessEntityAssignedTeam", required = false) String relatedBusinessEntityAssignedTeam, @RequestParam(value = "fields", required = false) String fields, @RequestParam(value = "offset", required = false) Integer offset, @RequestParam(value = "limit", required = false) Integer limit) throws Exception {
        return collectionActivityLogService.getCollectionHistoryView(collectionEntityId, collectionActivityType, relatedBusinessEntityId, relatedBusinessEntityType, relatedBusinessEntityStatus, relatedBusinessEntityCreatedDate, relatedBusinessEntityCreatedBy, relatedBusinessEntityAssignedTo, relatedBusinessEntityAssignedTeam, fields, offset, limit);
    }

    @RequestMapping(value = "/disputeHistoryView", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<OrderMgmtHistoryResponse> getDisputeHistoryView(@RequestParam(value = "collectionEntityId", required = false) Integer collectionEntityId, @RequestParam(value = "collectionActivityType", required = false) String collectionActivityType, @RequestParam(value = "relatedBusinessEntityId", required = false) String relatedBusinessEntityId, @RequestParam(value = "relatedBusinessEntityType", required = false) String relatedBusinessEntityType, @RequestParam(value = "relatedBusinessEntityStatus", required = false) String relatedBusinessEntityStatus, @RequestParam(value = "relatedBusinessEntityCreatedDate", required = false) String relatedBusinessEntityCreatedDate, @RequestParam(value = "relatedBusinessEntityCreatedBy", required = false) String relatedBusinessEntityCreatedBy, @RequestParam(value = "relatedBusinessEntityAssignedTo", required = false) String relatedBusinessEntityAssignedTo, @RequestParam(value = "relatedBusinessEntityAssignedTeam", required = false) String relatedBusinessEntityAssignedTeam, @RequestParam(value = "fields", required = false) String fields, @RequestParam(value = "offset", required = false) Integer offset, @RequestParam(value = "limit", required = false) Integer limit) throws Exception {
        return collectionActivityLogService.getDisputeHistoryView(collectionEntityId, collectionActivityType, relatedBusinessEntityId, relatedBusinessEntityType, relatedBusinessEntityStatus, relatedBusinessEntityCreatedDate, relatedBusinessEntityCreatedBy, relatedBusinessEntityAssignedTo, relatedBusinessEntityAssignedTeam, fields, offset, limit);
    }

    @RequestMapping(value = "/parrHistoryView", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<OrderMgmtHistoryResponse> getParrHistoryView(@RequestParam(value = "collectionEntityId", required = false) Integer collectionEntityId, @RequestParam(value = "collectionActivityType", required = false) String collectionActivityType, @RequestParam(value = "relatedBusinessEntityId", required = false) String relatedBusinessEntityId, @RequestParam(value = "relatedBusinessEntityType", required = false) String relatedBusinessEntityType, @RequestParam(value = "relatedBusinessEntityStatus", required = false) String relatedBusinessEntityStatus, @RequestParam(value = "relatedBusinessEntityCreatedDate", required = false) String relatedBusinessEntityCreatedDate, @RequestParam(value = "relatedBusinessEntityCreatedBy", required = false) String relatedBusinessEntityCreatedBy, @RequestParam(value = "relatedBusinessEntityAssignedTo", required = false) String relatedBusinessEntityAssignedTo, @RequestParam(value = "relatedBusinessEntityAssignedTeam", required = false) String relatedBusinessEntityAssignedTeam, @RequestParam(value = "fields", required = false) String fields, @RequestParam(value = "offset", required = false) Integer offset, @RequestParam(value = "limit", required = false) Integer limit) throws Exception {
        return collectionActivityLogService.getParrHistoryView(collectionEntityId, collectionActivityType, relatedBusinessEntityId, relatedBusinessEntityType, relatedBusinessEntityStatus, relatedBusinessEntityCreatedDate, relatedBusinessEntityCreatedBy, relatedBusinessEntityAssignedTo, relatedBusinessEntityAssignedTeam, fields, offset, limit);
    }

    @RequestMapping(value = "/init", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public void init() {
        collectionActivityLogService.init();
    }

    @RequestMapping(value = "/sampleJavaOperation", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String sampleJavaOperation(@RequestParam(value = "name", required = false) String name, HttpServletRequest request) {
        return collectionActivityLogService.sampleJavaOperation(name, request);
    }

    @RequestMapping(value = "/collectionActivityLog", method = RequestMethod.PUT)
    public CollectionActivityLog updateCollectionActivityLog(@RequestParam(value = "id", required = false) String id, @RequestBody CollectionActivityLog collectionActivityLog) throws Exception {
        return collectionActivityLogService.updateCollectionActivityLog(id, collectionActivityLog);
    }
}
